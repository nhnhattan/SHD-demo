<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>T√∫i chuy·ªÉn ·∫£nh m∆∞·ª£t + quay video kh√¥ng tr·∫Øng</title>
    <style>
      body {
        font-family: sans-serif;
        background: #f0f0f0;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding-top: 40px;
      }
      #scene {
        position: relative;
        width: 400px;
        height: 300px;
        background: #fff;
        border: 1px solid #ccc;
        overflow: hidden;
      }
      .item {
        position: absolute;
        width: 50px;
        height: 50px;
        top: 40px;
        transform: translateX(-50%);
      }
      .item:nth-child(1) { left: 100px; }
      .item:nth-child(2) { left: 200px; }
      .item:nth-child(3) { left: 300px; }
      #bag-container {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        width: 100px;
        height: 100px;
      }
      #bag-container img {
        position: absolute;
        top: 0; left: 0;
        width: 100%;
        height: 100%;
        object-fit: contain;
        opacity: 0;
        transition: opacity 0.4s ease;
      }
      #bag-container img.active {
        opacity: 1;
        z-index: 10;
      }
      #reward {
        position: absolute;
        bottom: 130px;
        left: 50%;
        transform: translateX(-50%);
        width: 80px;
        opacity: 0;
      }
      button {
        margin-top: 20px;
        padding: 10px 20px;
      }
      video {
        margin-top: 30px;
        max-width: 400px;
        border: 1px solid #999;
        image-rendering: crisp-edges;
      }
    </style>
  </head>
  <body>
    <div id="scene">
      <img
        class="item"
        src="https://w7.pngwing.com/pngs/365/52/png-transparent-kuromi-cartoon.png"
      />
      <img
        class="item"
        src="https://w7.pngwing.com/pngs/365/52/png-transparent-kuromi-cartoon.png"
      />
      <img
        class="item"
        src="https://w7.pngwing.com/pngs/365/52/png-transparent-kuromi-cartoon.png"
      />
      <div id="bag-container">
        <!-- c√°c ·∫£nh t√∫i s·∫Ω th√™m v√†o ƒë√¢y -->
      </div>
      <img
        id="reward"
        src="https://images.seeklogo.com/logo-png/61/1/kuromi-logo-png_seeklogo-614444.png"
      />
    </div>

    <button onclick="startRecordingAndAnimation()">
      üé• B·∫Øt ƒë·∫ßu 
    </button>

    <button id="downloadBtn" style="display:none; margin-top:10px;">‚¨áÔ∏è T·∫£i video v·ªÅ</button>


    <video id="preview" controls></video>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

    <script>
                    // T√™n ·∫£nh t√∫i b·∫•t k·ª≥ (th·ª© t·ª±)
                    const bagImages = [
                      'https://png.pngtree.com/png-vector/20230915/ourmid/pngtree-bag-school-png-png-image_10084237.png',
                      'https://static.vecteezy.com/system/resources/previews/023/522/781/non_2x/school-backpack-cutout-png.png',
                      'https://toppng.com/uploads/preview/school-bag-png-11553994322te60qiejy4.png',
                      'https://img.lovepik.com/free-png/20211211/lovepik-blue-school-bag-png-image_401486527_wh1200.png',
                      'https://static.vecteezy.com/system/resources/thumbnails/021/949/592/small_2x/blue-backpack-isolated-on-a-transparent-background-png.png'
                    ];

                    let canvas, ctx, mediaRecorder, chunks = [], interval;
                     let videoURL = null;

                    async function preloadImages(urls) {
                      const promises = urls.map(url => new Promise((res, rej) => {
                        const img = new Image();
                        img.crossOrigin = "anonymous"; // th√™m ƒë·ªÉ tr√°nh l·ªói CORS
                        img.onload = () => res(img);
                        img.onerror = () => rej(`Failed to load ${url}`);
                        img.src = url;
                      }));
                      return Promise.all(promises);
                    }

                    function resetScene() {
                      const items = document.querySelectorAll(".item");
                      const bagContainer = document.getElementById("bag-container");
                      const reward = document.getElementById("reward");

                      items.forEach((item, index) => {
                        item.style.opacity = "1";
                        item.style.top = "40px";
                        item.style.left = `${100 + index * 100}px`;
                        gsap.set(item, { x: 0, y: 0, autoAlpha: 1, scale: 1 });
                      });

                      bagContainer.innerHTML = '';

                      // Th√™m t·∫•t c·∫£ ·∫£nh t√∫i, active ·∫£nh ƒë·∫ßu ti√™n lu√¥n (ƒë·ªÉ hi·ªán ban ƒë·∫ßu)
                      bagImages.forEach((src, idx) => {
                        const img = document.createElement('img');
                        img.src = src;
                        if(idx === 0) img.classList.add('active');
                        bagContainer.appendChild(img);
                      });

                      gsap.set(reward, { opacity: 0, y: 0 });
                    }

                    async function startRecordingAndAnimation() {
                      try {
                        await preloadImages([
                          ...bagImages,
                          'https://w7.pngwing.com/pngs/365/52/png-transparent-kuromi-cartoon.png',
                          'https://w7.pngwing.com/pngs/365/52/png-transparent-kuromi-cartoon.png',
                          'https://w7.pngwing.com/pngs/365/52/png-transparent-kuromi-cartoon.png',
                          'https://images.seeklogo.com/logo-png/61/1/kuromi-logo-png_seeklogo-614444.png'
                        ]);
                      } catch(e) {
                        alert('L·ªói t·∫£i ·∫£nh: ' + e);
                        return;
                      }

                      resetScene();

                      const scene = document.getElementById("scene");
                      const scale = 3;  // tƒÉng l√™n scale 3 cho n√©t h∆°n

                      canvas = document.createElement("canvas");
                      canvas.width = scene.offsetWidth * scale;
                      canvas.height = scene.offsetHeight * scale;
                      ctx = canvas.getContext("2d");
                      ctx.scale(scale, scale);

                      const stream = canvas.captureStream(30);
                      mediaRecorder = new MediaRecorder(stream, { mimeType: "video/webm" });
                      chunks = [];

                      mediaRecorder.ondataavailable = e => {
                        if (e.data.size > 0) chunks.push(e.data);
                      };

                      mediaRecorder.onstop = () => {
  const blob = new Blob(chunks, { type: "video/webm" });
  if (videoURL) URL.revokeObjectURL(videoURL); // gi·∫£i ph√≥ng n·∫øu c√≥ link c≈©
  videoURL = URL.createObjectURL(blob);
  const preview = document.getElementById("preview");
  preview.src = videoURL;

  // Hi·ªán n√∫t t·∫£i video
  const dlBtn = document.getElementById("downloadBtn");
  dlBtn.style.display = "inline-block";
};

                      mediaRecorder.start();

                      interval = setInterval(async () => {
                        const snapshot = await html2canvas(scene, { scale, useCORS: true, backgroundColor: '#fff' });
                        ctx.clearRect(0, 0, canvas.width, canvas.height);
                        ctx.drawImage(snapshot, 0, 0, snapshot.width, snapshot.height, 0, 0, canvas.width / scale, canvas.height / scale);
                      }, 33);

                      runGSAPAnimation(() => {
                        clearInterval(interval);
                        mediaRecorder.stop();
                      });
                    }

                    function changeBagImage(index) {
                      const imgs = document.querySelectorAll('#bag-container img');
                      imgs.forEach((img, idx) => {
                        img.classList.toggle('active', idx === index);
                      });
                    }

      function runGSAPAnimation(onDone) {
        const items = document.querySelectorAll(".item");
        const sceneRect = document.getElementById("scene").getBoundingClientRect();
        const bagContainer = document.getElementById("bag-container");
        const reward = document.getElementById("reward");
        const bagImgs = document.querySelectorAll('#bag-container img');

        const bagRect = bagContainer.getBoundingClientRect();

        const bagCenter = {
          x: bagRect.left + bagRect.width / 2 - sceneRect.left,
          y: bagRect.top + bagRect.height / 2 - sceneRect.top
        };

        const tl = gsap.timeline();

        items.forEach((item, index) => {
          const itemRect = item.getBoundingClientRect();
          const itemCenter = {
            x: itemRect.left + itemRect.width / 2 - sceneRect.left,
            y: itemRect.top + itemRect.height / 2 - sceneRect.top
          };

          const dx = bagCenter.x - itemCenter.x;
          const dy = bagCenter.y - itemCenter.y;

          tl.to(item, {
            x: dx,
            y: dy,
            scale: 0.3,
            duration: 1,
            ease: "power3.inOut"
          });

          tl.to(item, {
            autoAlpha: 0,
            duration: 0.3,
            ease: "power1.out"
          });

          // Transition t√∫i nh·∫π nh√†ng, kh√¥ng gi·∫≠t
          tl.to(bagImgs[index], {
            opacity: 0,
            duration: 0.5,
            ease: "power1.inOut"
          }, "-=0.3");

          tl.to(bagImgs[index + 1], {
            opacity: 1,
            duration: 0.5,
            ease: "power1.inOut"
          }, "-=0.3");
        });

        // ·∫®n t√∫i ƒë·∫ßu ti√™n khi t√∫i cu·ªëi (m·ªü t√∫i) xu·∫•t hi·ªán
        tl.to(bagImgs[bagImgs.length - 2], {
          opacity: 0,
          duration: 0.4,
          ease: "power1.inOut"
        }, "+=0.2");

        tl.to(bagImgs[bagImgs.length - 1], {
          opacity: 1,
          duration: 0.5,
          ease: "power1.inOut"
        });

        gsap.set(reward, {opacity: 0, y: 80, x: 0});

        // Bay l√™n y=50 r·ªìi m·ªõi g·ªçi onDone()
        tl.to(reward, {
          opacity: 1,
          y: 50,
          duration: 1,
          ease: "power1.out",
        }, "+=0.4").to({}, { // delay 1 gi√¢y gi·ªØ nguy√™n tr·∫°ng th√°i
        duration: 1,
        onComplete: onDone
      });
      }

                    window.addEventListener('DOMContentLoaded', () => {
                    resetScene();
                  });
                  document.getElementById("downloadBtn").onclick = () => {
  if (!videoURL) return;
  const a = document.createElement("a");
  a.href = videoURL;
  a.download = "animation.webm";
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
};
    </script>
  </body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Hi·ªáu ·ª©ng x√© l·ªô n·ªÅn kh√°c & reset</title>
  <style>
    body {
      margin: 0; padding: 0;
      height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      background: #eee;
      user-select: none;
      font-family: sans-serif;
      gap: 20px;
    }
    #container {
      position: relative;
      width: 300px;
      height: 200px;
      cursor: grab;
      overflow: hidden;
      border-radius: 8px;
      box-shadow: 0 0 15px rgba(0,0,0,0.3);
      background: #fff;
    }
    #background {
      position: absolute;
      top: 0; left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(135deg, #ff9a9e 0%, #fad0c4 100%);
      z-index: 1;
      filter: brightness(0.85);
    }
    #image {
      position: absolute;
      top: 0; left: 0;
      width: 100%;
      height: 100%;
      background: url('https://picsum.photos/id/1015/300/200') center/cover no-repeat;
      z-index: 2;
      transform-origin: left center;
      will-change: clip-path;
      clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
      transition: opacity 0.3s ease;
    }
    #container.dragging {
      cursor: grabbing;
    }
    #congrats {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 28px;
      font-weight: bold;
      color: #27ae60;
      background: rgba(255,255,255,0.9);
      padding: 20px 40px;
      border-radius: 10px;
      box-shadow: 0 0 15px rgba(39, 174, 96, 0.7);
      opacity: 0;
      pointer-events: none;
      user-select: none;
      z-index: 5;
      transition: opacity 0.5s ease;
    }
    #congrats.show {
      opacity: 1;
      pointer-events: auto;
    }
    #resetBtn {
      padding: 10px 20px;
      font-size: 16px;
      border: none;
      border-radius: 6px;
      background-color: #27ae60;
      color: white;
      cursor: pointer;
      user-select: none;
      display: none;
      box-shadow: 0 4px 8px rgba(39, 174, 96, 0.5);
      transition: background-color 0.3s ease;
    }
    #resetBtn:hover {
      background-color: #219150;
    }
  </style>
</head>
<body>

<div id="container">
  <div id="background"></div>
  <div id="image"></div>
  <div id="congrats">üéâ Ch√∫c m·ª´ng! üéâ</div>
</div>
<button id="resetBtn">lai</button>

<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
<script>
  const container = document.getElementById('container');
  const image = document.getElementById('image');
  const congrats = document.getElementById('congrats');
  const resetBtn = document.getElementById('resetBtn');

  let dragging = false;
  let startX = 0;
  let currentClipX = 0;
  const maxDeltaX = 300;
  let finished = false;

  container.addEventListener('mousedown', e => {
    if (finished) return;  // Kh√¥ng cho k√©o khi ƒë√£ x√© h·∫øt
    dragging = true;
    startX = e.clientX;
    congrats.classList.remove('show');
    image.style.opacity = '1';
    container.classList.add('dragging');
  });

  window.addEventListener('mouseup', e => {
    if (!dragging) return;
    dragging = false;
    container.classList.remove('dragging');
  });

  window.addEventListener('mousemove', e => {
    if (!dragging || finished) return;

    let deltaX = e.clientX - startX;
    let newClipX = currentClipX + deltaX;
    if (newClipX < 0) newClipX = 0;
    if (newClipX > maxDeltaX) newClipX = maxDeltaX;

    let clipPathValue = `polygon(${newClipX}px 0, 100% 0, 100% 100%, ${newClipX}px 100%)`;

    gsap.to(image, {
      clipPath: clipPathValue,
      duration: 0.1,
      ease: 'power1.out'
    });

    if (newClipX >= maxDeltaX) {
      finished = true;
      gsap.to(image, {opacity: 0, duration: 0.3});
      congrats.classList.add('show');
      resetBtn.style.display = 'inline-block';
    } else {
      congrats.classList.remove('show');
      gsap.to(image, {opacity: 1, duration: 0.3});
    }
  });

  window.addEventListener('mousemove', e => {
    if (!dragging || finished) return;
    let deltaX = e.clientX - startX;
    let newClipX = currentClipX + deltaX;
    if (newClipX < 0) newClipX = 0;
    if (newClipX > maxDeltaX) newClipX = maxDeltaX;
    currentClipX = newClipX;
    startX = e.clientX;
  });

  resetBtn.addEventListener('click', () => {
    finished = false;
    currentClipX = 0;
    congrats.classList.remove('show');
    resetBtn.style.display = 'none';
    gsap.to(image, {
      clipPath: 'polygon(0 0, 100% 0, 100% 100%, 0 100%)',
      opacity: 1,
      duration: 0.5,
      ease: 'power3.out'
    });
  });
</script>

</body>
</html>

